# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

enum Role {
  PLAYER
  TEAMLEADER
  CLUSTERLEADER
  CREW
}

enum PastoralStatus {
  PASTOR
  SCGL
  CGL
  PCGL
  ACGL
  OM
  NB
  NF
}

enum Gender {
  MALE
  FEMALE
}

enum Satellite {
  FGASETAPAK
  FGARAWANG
  FGAPUCHONG
  FGAPJ
  FGAUSJ
}

type Cluster {
  id: ID!
  name: String!
  color: String!
  teams: [Team!]!
}

type Team {
  id: ID!
  name: String
  avatarUrl: String
  points: Float!
  cluster: Cluster
  completed(page: PaginationInput!): [Mission!]!
  members: [User!]!
}

type Speed {
  id: ID!
  completedAt: Time
  answer: String
  createdAt: Time!
  updatedAt: Time!
  team: Team!
  mission: Mission!
}

type Mission {
  id: ID!
  title: String!
  description: String
  points: Float!
  createdAt: Time!
  updatedAt: Time!
  startAt: Time!
  endAt: Time!
  slug: String!
  completedBy: [Team!]!
}

type Escape {
  id: ID!
  missionOne: Boolean!
  missionTwo: Boolean!
  missionThree: Float!
  team: Team!
}

type Humanity {
  id: ID!
  gatherLink: String!
  batch: Int!
  photo1: String
  photo2: String
  photo3: String
  team: Team!
  mission: Mission!
  createdAt: Time!
  updatedAt: Time!
  submittedAt: Time
}

type Discovery {
  id: ID!
  videoUrl: String
  team: Team
  mission: Mission
  submittedAt: Time
  createdAt: Time!
  updatedAt: Time!
}

type User {
  id: ID!
  username: String!
  email: String!
  createdAt: Time!
  updatedAt: Time!
  profile: Profile
  team: Team
  roles: [Role!]!
}

type Invitation {
  id: ID!
  from: User
  user: User!
  team: Team!
  createdAt: Time!
  updatedAt: Time!
}

type Profile {
  id: ID!
  status: PastoralStatus
  gender: Gender!
  satellite: Satellite
  nameEng: String!
  nameChi: String
  contact: String!
  dob: Time!
  bio: String
  tngReceiptUrl: String
  avatarUrl: String
  createdAt: Time!
  updatedAt: Time!
  address: Address
  invitedBy: String
}

type Address {
  id: ID!
  city: String!
  line1: String!
  line2: String
  state: String!
  country: String!
  postalCode: String!
}

type Post {
  id: ID!
  content: String!
  images: [String!]!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  likes: Int!
  liked(user_id: ID!): Boolean!
  comments(page: PaginationInput!): [Comment!]!
}

type Comment {
  id: ID!
  content: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!
  post: Post!
  likes: Int!
}

type Query {
  user(user_id: ID!): User
  users(page: PaginationInput!): [User!]!
  userCount: Int!
  team(team_id: ID!): Team
  teams(page: PaginationInput!): [Team!]!
  escape(team_id: ID!): Escape
  speed(team_id: ID!): Speed
  speeds(page: PaginationInput!): [Speed!]!
  humanity(team_id: ID!): Humanity
  humanities(page: PaginationInput!): [Humanity!]!
  discovery(team_id: ID!): Discovery
  cluster(cluster_id: ID!): Cluster
  mission(mission_id: ID!): Mission
  missions(page: PaginationInput!): [Mission!]!
  post(post_id: ID!): Post
  posts(page: PaginationInput!): [Post!]!
  invitations(user_id: ID!, page: PaginationInput!): [Invitation!]!
}

type Mutation {
  createUser(param: NewUser!): User
  createPost(param: NewPost!): Post
  createComment(param: NewComment!): Comment
  createInvitation(param: NewInvitation!): Invitation
  createTeam(param: NewTeam!): Team
  updateUser(user_id: ID!, param: UpdateUserInput!): User
  updateTeam(team_id: ID!, param: UpdateTeamInput!): Team
  upsertEscape(param: UpsertEscapeInput!): Escape
  upsertSpeed(param: UpsertSpeedInput!): Speed
  upsertHumanity(param: UpsertHumanityInput!): Humanity
  upsertDiscovery(param: UpsertDiscoveryInput!): Discovery
  likePost(param: PostLikeInput!): Boolean
  unlikePost(param: PostLikeInput!): Boolean
  likeComment(param: CommentLikeInput!): Boolean
  unlikeComment(param: CommentLikeInput!): Boolean
  acceptInvitation(invitation_id: ID!): Boolean
  rejectInvitation(invitation_id: ID!): Boolean
}

input PaginationInput {
  offset: Int!
  limit: Int!
}

input UpsertEscapeInput {
  teamId: ID!
  missionOne: Boolean
  missionTwo: Boolean
  missionThree: Float
}

input UpsertSpeedInput {
  teamId: ID!
  missionId: ID!
  completedAt: Time
  answer: String
}

input UpsertHumanityInput {
  teamId: ID!
  missionId: ID!
  batch: Int!
  gatherLink: String!
  photo1: String
  photo2: String
  photo3: String
  submittedAt: Time
}

input UpsertDiscoveryInput {
  teamId: ID!
  missionId: ID!
  videoUrl: String
  submittedAt: Time
}

input PostLikeInput {
  postId: ID!
  userId: ID!
}

input CommentLikeInput {
  commentId: ID!
  userId: ID!
}

input NewComment {
  content: String!
  postId: ID!
  userId: ID!
}

input NewPost {
  content: String!
  images: [String!]!
  userId: ID!
}

input NewUser {
  id: ID
  username: String!
  email: String!
  profile: NewProfile!
  roles: [Role!]!
  teamId: ID
}

input NewInvitation {
  from: ID!
  to: ID!
  teamId: ID!
}

input NewTeam {
  name: String!
  avatarUrl: String
  clusterId: String
}

input NewProfile {
  status: PastoralStatus
  gender: Gender!
  satellite: Satellite
  nameEng: String!
  nameChi: String
  contact: String!
  dob: Time!
  tngReceiptUrl: String
  avatarUrl: String
  address: NewAddress
  invitedBy: String
}

input NewAddress {
  city: String!
  line1: String!
  line2: String
  state: String!
  country: String!
  postalCode: String!
}

input UpdateUserInput {
  teamId: ID
  profile: UpdateProfileInput
}

input UpdateProfileInput {
  avatarUrl: String
  nameEng: String
  nameChi: String
  bio: String
}

input UpdateTeamInput {
  name: String
  avatarUrl: String
  points: Float
}
