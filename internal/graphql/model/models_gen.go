// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Cluster struct {
	ID    string  `json:"id"`
	Name  string  `json:"name"`
	Color string  `json:"color"`
	Teams []*Team `json:"teams"`
}

type Mission struct {
	ID          string    `json:"id"`
	Title       string    `json:"title"`
	Description *string   `json:"description"`
	Points      float64   `json:"points"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
	CompletedBy []*Team   `json:"completedBy"`
}

type Role string

const (
	RolePlayer        Role = "PLAYER"
	RoleTeamleader    Role = "TEAMLEADER"
	RoleClusterleader Role = "CLUSTERLEADER"
	RoleCrew          Role = "CREW"
)

var AllRole = []Role{
	RolePlayer,
	RoleTeamleader,
	RoleClusterleader,
	RoleCrew,
}

func (e Role) IsValid() bool {
	switch e {
	case RolePlayer, RoleTeamleader, RoleClusterleader, RoleCrew:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
