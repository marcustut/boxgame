/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/Address": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Address.id"];
          city?: parameters["rowFilter.Address.city"];
          line1?: parameters["rowFilter.Address.line1"];
          line2?: parameters["rowFilter.Address.line2"];
          state?: parameters["rowFilter.Address.state"];
          country?: parameters["rowFilter.Address.country"];
          postalCode?: parameters["rowFilter.Address.postalCode"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Address"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Address */
          Address?: definitions["Address"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Address.id"];
          city?: parameters["rowFilter.Address.city"];
          line1?: parameters["rowFilter.Address.line1"];
          line2?: parameters["rowFilter.Address.line2"];
          state?: parameters["rowFilter.Address.state"];
          country?: parameters["rowFilter.Address.country"];
          postalCode?: parameters["rowFilter.Address.postalCode"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Address.id"];
          city?: parameters["rowFilter.Address.city"];
          line1?: parameters["rowFilter.Address.line1"];
          line2?: parameters["rowFilter.Address.line2"];
          state?: parameters["rowFilter.Address.state"];
          country?: parameters["rowFilter.Address.country"];
          postalCode?: parameters["rowFilter.Address.postalCode"];
        };
        body: {
          /** Address */
          Address?: definitions["Address"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Cluster": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Cluster.id"];
          name?: parameters["rowFilter.Cluster.name"];
          color?: parameters["rowFilter.Cluster.color"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Cluster"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Cluster */
          Cluster?: definitions["Cluster"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Cluster.id"];
          name?: parameters["rowFilter.Cluster.name"];
          color?: parameters["rowFilter.Cluster.color"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Cluster.id"];
          name?: parameters["rowFilter.Cluster.name"];
          color?: parameters["rowFilter.Cluster.color"];
        };
        body: {
          /** Cluster */
          Cluster?: definitions["Cluster"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Comment": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Comment.id"];
          content?: parameters["rowFilter.Comment.content"];
          created_at?: parameters["rowFilter.Comment.created_at"];
          updated_at?: parameters["rowFilter.Comment.updated_at"];
          userId?: parameters["rowFilter.Comment.userId"];
          postId?: parameters["rowFilter.Comment.postId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Comment"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Comment */
          Comment?: definitions["Comment"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Comment.id"];
          content?: parameters["rowFilter.Comment.content"];
          created_at?: parameters["rowFilter.Comment.created_at"];
          updated_at?: parameters["rowFilter.Comment.updated_at"];
          userId?: parameters["rowFilter.Comment.userId"];
          postId?: parameters["rowFilter.Comment.postId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Comment.id"];
          content?: parameters["rowFilter.Comment.content"];
          created_at?: parameters["rowFilter.Comment.created_at"];
          updated_at?: parameters["rowFilter.Comment.updated_at"];
          userId?: parameters["rowFilter.Comment.userId"];
          postId?: parameters["rowFilter.Comment.postId"];
        };
        body: {
          /** Comment */
          Comment?: definitions["Comment"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/CommentLike": {
    get: {
      parameters: {
        query: {
          commentId?: parameters["rowFilter.CommentLike.commentId"];
          userId?: parameters["rowFilter.CommentLike.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["CommentLike"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** CommentLike */
          CommentLike?: definitions["CommentLike"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          commentId?: parameters["rowFilter.CommentLike.commentId"];
          userId?: parameters["rowFilter.CommentLike.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          commentId?: parameters["rowFilter.CommentLike.commentId"];
          userId?: parameters["rowFilter.CommentLike.userId"];
        };
        body: {
          /** CommentLike */
          CommentLike?: definitions["CommentLike"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Mission": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Mission.id"];
          title?: parameters["rowFilter.Mission.title"];
          description?: parameters["rowFilter.Mission.description"];
          points?: parameters["rowFilter.Mission.points"];
          createdAt?: parameters["rowFilter.Mission.createdAt"];
          updatedAt?: parameters["rowFilter.Mission.updatedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Mission"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Mission */
          Mission?: definitions["Mission"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Mission.id"];
          title?: parameters["rowFilter.Mission.title"];
          description?: parameters["rowFilter.Mission.description"];
          points?: parameters["rowFilter.Mission.points"];
          createdAt?: parameters["rowFilter.Mission.createdAt"];
          updatedAt?: parameters["rowFilter.Mission.updatedAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Mission.id"];
          title?: parameters["rowFilter.Mission.title"];
          description?: parameters["rowFilter.Mission.description"];
          points?: parameters["rowFilter.Mission.points"];
          createdAt?: parameters["rowFilter.Mission.createdAt"];
          updatedAt?: parameters["rowFilter.Mission.updatedAt"];
        };
        body: {
          /** Mission */
          Mission?: definitions["Mission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Post": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Post.id"];
          content?: parameters["rowFilter.Post.content"];
          images?: parameters["rowFilter.Post.images"];
          created_at?: parameters["rowFilter.Post.created_at"];
          updated_at?: parameters["rowFilter.Post.updated_at"];
          userId?: parameters["rowFilter.Post.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Post"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Post */
          Post?: definitions["Post"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Post.id"];
          content?: parameters["rowFilter.Post.content"];
          images?: parameters["rowFilter.Post.images"];
          created_at?: parameters["rowFilter.Post.created_at"];
          updated_at?: parameters["rowFilter.Post.updated_at"];
          userId?: parameters["rowFilter.Post.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Post.id"];
          content?: parameters["rowFilter.Post.content"];
          images?: parameters["rowFilter.Post.images"];
          created_at?: parameters["rowFilter.Post.created_at"];
          updated_at?: parameters["rowFilter.Post.updated_at"];
          userId?: parameters["rowFilter.Post.userId"];
        };
        body: {
          /** Post */
          Post?: definitions["Post"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/PostLike": {
    get: {
      parameters: {
        query: {
          postId?: parameters["rowFilter.PostLike.postId"];
          userId?: parameters["rowFilter.PostLike.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["PostLike"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** PostLike */
          PostLike?: definitions["PostLike"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          postId?: parameters["rowFilter.PostLike.postId"];
          userId?: parameters["rowFilter.PostLike.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          postId?: parameters["rowFilter.PostLike.postId"];
          userId?: parameters["rowFilter.PostLike.userId"];
        };
        body: {
          /** PostLike */
          PostLike?: definitions["PostLike"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Profile": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Profile.id"];
          status?: parameters["rowFilter.Profile.status"];
          gender?: parameters["rowFilter.Profile.gender"];
          nameEng?: parameters["rowFilter.Profile.nameEng"];
          contact?: parameters["rowFilter.Profile.contact"];
          dob?: parameters["rowFilter.Profile.dob"];
          tngReceiptUrl?: parameters["rowFilter.Profile.tngReceiptUrl"];
          avatarUrl?: parameters["rowFilter.Profile.avatarUrl"];
          createdAt?: parameters["rowFilter.Profile.createdAt"];
          updatedAt?: parameters["rowFilter.Profile.updatedAt"];
          addressId?: parameters["rowFilter.Profile.addressId"];
          satellite?: parameters["rowFilter.Profile.satellite"];
          nameChi?: parameters["rowFilter.Profile.nameChi"];
          invitedBy?: parameters["rowFilter.Profile.invitedBy"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Profile"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Profile */
          Profile?: definitions["Profile"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Profile.id"];
          status?: parameters["rowFilter.Profile.status"];
          gender?: parameters["rowFilter.Profile.gender"];
          nameEng?: parameters["rowFilter.Profile.nameEng"];
          contact?: parameters["rowFilter.Profile.contact"];
          dob?: parameters["rowFilter.Profile.dob"];
          tngReceiptUrl?: parameters["rowFilter.Profile.tngReceiptUrl"];
          avatarUrl?: parameters["rowFilter.Profile.avatarUrl"];
          createdAt?: parameters["rowFilter.Profile.createdAt"];
          updatedAt?: parameters["rowFilter.Profile.updatedAt"];
          addressId?: parameters["rowFilter.Profile.addressId"];
          satellite?: parameters["rowFilter.Profile.satellite"];
          nameChi?: parameters["rowFilter.Profile.nameChi"];
          invitedBy?: parameters["rowFilter.Profile.invitedBy"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Profile.id"];
          status?: parameters["rowFilter.Profile.status"];
          gender?: parameters["rowFilter.Profile.gender"];
          nameEng?: parameters["rowFilter.Profile.nameEng"];
          contact?: parameters["rowFilter.Profile.contact"];
          dob?: parameters["rowFilter.Profile.dob"];
          tngReceiptUrl?: parameters["rowFilter.Profile.tngReceiptUrl"];
          avatarUrl?: parameters["rowFilter.Profile.avatarUrl"];
          createdAt?: parameters["rowFilter.Profile.createdAt"];
          updatedAt?: parameters["rowFilter.Profile.updatedAt"];
          addressId?: parameters["rowFilter.Profile.addressId"];
          satellite?: parameters["rowFilter.Profile.satellite"];
          nameChi?: parameters["rowFilter.Profile.nameChi"];
          invitedBy?: parameters["rowFilter.Profile.invitedBy"];
        };
        body: {
          /** Profile */
          Profile?: definitions["Profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Team": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          name?: parameters["rowFilter.Team.name"];
          color?: parameters["rowFilter.Team.color"];
          points?: parameters["rowFilter.Team.points"];
          clusterId?: parameters["rowFilter.Team.clusterId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Team"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Team */
          Team?: definitions["Team"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          name?: parameters["rowFilter.Team.name"];
          color?: parameters["rowFilter.Team.color"];
          points?: parameters["rowFilter.Team.points"];
          clusterId?: parameters["rowFilter.Team.clusterId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Team.id"];
          name?: parameters["rowFilter.Team.name"];
          color?: parameters["rowFilter.Team.color"];
          points?: parameters["rowFilter.Team.points"];
          clusterId?: parameters["rowFilter.Team.clusterId"];
        };
        body: {
          /** Team */
          Team?: definitions["Team"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/TeamMission": {
    get: {
      parameters: {
        query: {
          teamId?: parameters["rowFilter.TeamMission.teamId"];
          missionId?: parameters["rowFilter.TeamMission.missionId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["TeamMission"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** TeamMission */
          TeamMission?: definitions["TeamMission"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          teamId?: parameters["rowFilter.TeamMission.teamId"];
          missionId?: parameters["rowFilter.TeamMission.missionId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          teamId?: parameters["rowFilter.TeamMission.teamId"];
          missionId?: parameters["rowFilter.TeamMission.missionId"];
        };
        body: {
          /** TeamMission */
          TeamMission?: definitions["TeamMission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/User": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.User.id"];
          username?: parameters["rowFilter.User.username"];
          createdAt?: parameters["rowFilter.User.createdAt"];
          updatedAt?: parameters["rowFilter.User.updatedAt"];
          teamId?: parameters["rowFilter.User.teamId"];
          email?: parameters["rowFilter.User.email"];
          profileId?: parameters["rowFilter.User.profileId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["User"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** User */
          User?: definitions["User"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.User.id"];
          username?: parameters["rowFilter.User.username"];
          createdAt?: parameters["rowFilter.User.createdAt"];
          updatedAt?: parameters["rowFilter.User.updatedAt"];
          teamId?: parameters["rowFilter.User.teamId"];
          email?: parameters["rowFilter.User.email"];
          profileId?: parameters["rowFilter.User.profileId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.User.id"];
          username?: parameters["rowFilter.User.username"];
          createdAt?: parameters["rowFilter.User.createdAt"];
          updatedAt?: parameters["rowFilter.User.updatedAt"];
          teamId?: parameters["rowFilter.User.teamId"];
          email?: parameters["rowFilter.User.email"];
          profileId?: parameters["rowFilter.User.profileId"];
        };
        body: {
          /** User */
          User?: definitions["User"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/UserDetailsView": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.UserDetailsView.id"];
          username?: parameters["rowFilter.UserDetailsView.username"];
          email?: parameters["rowFilter.UserDetailsView.email"];
          nameEng?: parameters["rowFilter.UserDetailsView.nameEng"];
          nameChi?: parameters["rowFilter.UserDetailsView.nameChi"];
          contact?: parameters["rowFilter.UserDetailsView.contact"];
          dob?: parameters["rowFilter.UserDetailsView.dob"];
          gender?: parameters["rowFilter.UserDetailsView.gender"];
          status?: parameters["rowFilter.UserDetailsView.status"];
          satellite?: parameters["rowFilter.UserDetailsView.satellite"];
          tngReceiptUrl?: parameters["rowFilter.UserDetailsView.tngReceiptUrl"];
          avatarUrl?: parameters["rowFilter.UserDetailsView.avatarUrl"];
          city?: parameters["rowFilter.UserDetailsView.city"];
          line1?: parameters["rowFilter.UserDetailsView.line1"];
          line2?: parameters["rowFilter.UserDetailsView.line2"];
          state?: parameters["rowFilter.UserDetailsView.state"];
          country?: parameters["rowFilter.UserDetailsView.country"];
          postalCode?: parameters["rowFilter.UserDetailsView.postalCode"];
          createdAt?: parameters["rowFilter.UserDetailsView.createdAt"];
          updatedAt?: parameters["rowFilter.UserDetailsView.updatedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["UserDetailsView"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/UserRole": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.UserRole.id"];
          role?: parameters["rowFilter.UserRole.role"];
          userId?: parameters["rowFilter.UserRole.userId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["UserRole"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** UserRole */
          UserRole?: definitions["UserRole"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.UserRole.id"];
          role?: parameters["rowFilter.UserRole.role"];
          userId?: parameters["rowFilter.UserRole.userId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.UserRole.id"];
          role?: parameters["rowFilter.UserRole.role"];
          userId?: parameters["rowFilter.UserRole.userId"];
        };
        body: {
          /** UserRole */
          UserRole?: definitions["UserRole"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  Address: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    city: string;
    line1: string;
    line2?: string;
    state: string;
    country: string;
    postalCode: string;
  };
  Cluster: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name: string;
    color: string;
  };
  Comment: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    content: string;
    created_at: string;
    updated_at: string;
    /**
     * Note:
     * This is a Foreign Key to `User.id`.<fk table='User' column='id'/>
     */
    userId: string;
    /**
     * Note:
     * This is a Foreign Key to `Post.id`.<fk table='Post' column='id'/>
     */
    postId: string;
  };
  CommentLike: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `Comment.id`.<fk table='Comment' column='id'/>
     */
    commentId: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `User.id`.<fk table='User' column='id'/>
     */
    userId: string;
  };
  Mission: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    title: string;
    description?: string;
    points: number;
    createdAt: string;
    updatedAt: string;
  };
  Post: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    content: string;
    images?: string;
    created_at: string;
    updated_at: string;
    /**
     * Note:
     * This is a Foreign Key to `User.id`.<fk table='User' column='id'/>
     */
    userId: string;
  };
  PostLike: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `Post.id`.<fk table='Post' column='id'/>
     */
    postId: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `User.id`.<fk table='User' column='id'/>
     */
    userId: string;
  };
  Profile: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    status?: "PASTOR" | "SCGL" | "CGL" | "PCGL" | "ACGL" | "OM" | "NB" | "NF";
    gender: "MALE" | "FEMALE";
    nameEng: string;
    contact: string;
    dob: string;
    tngReceiptUrl?: string;
    avatarUrl?: string;
    createdAt: string;
    updatedAt: string;
    /**
     * Note:
     * This is a Foreign Key to `Address.id`.<fk table='Address' column='id'/>
     */
    addressId?: string;
    satellite?: "FGASETAPAK" | "FGARAWANG" | "FGAPUCHONG" | "FGAPJ" | "FGAUSJ";
    nameChi?: string;
    invitedBy?: string;
  };
  Team: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    name?: string;
    color: string;
    points: number;
    /**
     * Note:
     * This is a Foreign Key to `Cluster.id`.<fk table='Cluster' column='id'/>
     */
    clusterId?: string;
  };
  TeamMission: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `Team.id`.<fk table='Team' column='id'/>
     */
    teamId: string;
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `Mission.id`.<fk table='Mission' column='id'/>
     */
    missionId: string;
  };
  User: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    username: string;
    createdAt: string;
    updatedAt: string;
    /**
     * Note:
     * This is a Foreign Key to `Team.id`.<fk table='Team' column='id'/>
     */
    teamId?: string;
    email: string;
    /**
     * Note:
     * This is a Foreign Key to `Profile.id`.<fk table='Profile' column='id'/>
     */
    profileId: string;
  };
  UserDetailsView: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    username?: string;
    email?: string;
    nameEng?: string;
    nameChi?: string;
    contact?: string;
    dob?: string;
    gender?: "MALE" | "FEMALE";
    status?: "PASTOR" | "SCGL" | "CGL" | "PCGL" | "ACGL" | "OM" | "NB" | "NF";
    satellite?: "FGASETAPAK" | "FGARAWANG" | "FGAPUCHONG" | "FGAPJ" | "FGAUSJ";
    tngReceiptUrl?: string;
    avatarUrl?: string;
    city?: string;
    line1?: string;
    line2?: string;
    state?: string;
    country?: string;
    postalCode?: string;
    createdAt?: string;
    updatedAt?: string;
  };
  UserRole: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    role: "PLAYER" | "TEAMLEADER" | "CLUSTERLEADER" | "CREW";
    /**
     * Note:
     * This is a Foreign Key to `User.id`.<fk table='User' column='id'/>
     */
    userId: string;
  };
  _prisma_migrations: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    checksum: string;
    finished_at?: string;
    migration_name: string;
    logs?: string;
    rolled_back_at?: string;
    started_at: string;
    applied_steps_count: number;
  };
}

export interface parameters {
  /** Preference */
  preferParams: "params=single-object";
  /** Preference */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /** Preference */
  preferCount: "count=none";
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** Address */
  "body.Address": definitions["Address"];
  "rowFilter.Address.id": string;
  "rowFilter.Address.city": string;
  "rowFilter.Address.line1": string;
  "rowFilter.Address.line2": string;
  "rowFilter.Address.state": string;
  "rowFilter.Address.country": string;
  "rowFilter.Address.postalCode": string;
  /** Cluster */
  "body.Cluster": definitions["Cluster"];
  "rowFilter.Cluster.id": string;
  "rowFilter.Cluster.name": string;
  "rowFilter.Cluster.color": string;
  /** Comment */
  "body.Comment": definitions["Comment"];
  "rowFilter.Comment.id": string;
  "rowFilter.Comment.content": string;
  "rowFilter.Comment.created_at": string;
  "rowFilter.Comment.updated_at": string;
  "rowFilter.Comment.userId": string;
  "rowFilter.Comment.postId": string;
  /** CommentLike */
  "body.CommentLike": definitions["CommentLike"];
  "rowFilter.CommentLike.commentId": string;
  "rowFilter.CommentLike.userId": string;
  /** Mission */
  "body.Mission": definitions["Mission"];
  "rowFilter.Mission.id": string;
  "rowFilter.Mission.title": string;
  "rowFilter.Mission.description": string;
  "rowFilter.Mission.points": string;
  "rowFilter.Mission.createdAt": string;
  "rowFilter.Mission.updatedAt": string;
  /** Post */
  "body.Post": definitions["Post"];
  "rowFilter.Post.id": string;
  "rowFilter.Post.content": string;
  "rowFilter.Post.images": string;
  "rowFilter.Post.created_at": string;
  "rowFilter.Post.updated_at": string;
  "rowFilter.Post.userId": string;
  /** PostLike */
  "body.PostLike": definitions["PostLike"];
  "rowFilter.PostLike.postId": string;
  "rowFilter.PostLike.userId": string;
  /** Profile */
  "body.Profile": definitions["Profile"];
  "rowFilter.Profile.id": string;
  "rowFilter.Profile.status": string;
  "rowFilter.Profile.gender": string;
  "rowFilter.Profile.nameEng": string;
  "rowFilter.Profile.contact": string;
  "rowFilter.Profile.dob": string;
  "rowFilter.Profile.tngReceiptUrl": string;
  "rowFilter.Profile.avatarUrl": string;
  "rowFilter.Profile.createdAt": string;
  "rowFilter.Profile.updatedAt": string;
  "rowFilter.Profile.addressId": string;
  "rowFilter.Profile.satellite": string;
  "rowFilter.Profile.nameChi": string;
  "rowFilter.Profile.invitedBy": string;
  /** Team */
  "body.Team": definitions["Team"];
  "rowFilter.Team.id": string;
  "rowFilter.Team.name": string;
  "rowFilter.Team.color": string;
  "rowFilter.Team.points": string;
  "rowFilter.Team.clusterId": string;
  /** TeamMission */
  "body.TeamMission": definitions["TeamMission"];
  "rowFilter.TeamMission.teamId": string;
  "rowFilter.TeamMission.missionId": string;
  /** User */
  "body.User": definitions["User"];
  "rowFilter.User.id": string;
  "rowFilter.User.username": string;
  "rowFilter.User.createdAt": string;
  "rowFilter.User.updatedAt": string;
  "rowFilter.User.teamId": string;
  "rowFilter.User.email": string;
  "rowFilter.User.profileId": string;
  /** UserDetailsView */
  "body.UserDetailsView": definitions["UserDetailsView"];
  "rowFilter.UserDetailsView.id": string;
  "rowFilter.UserDetailsView.username": string;
  "rowFilter.UserDetailsView.email": string;
  "rowFilter.UserDetailsView.nameEng": string;
  "rowFilter.UserDetailsView.nameChi": string;
  "rowFilter.UserDetailsView.contact": string;
  "rowFilter.UserDetailsView.dob": string;
  "rowFilter.UserDetailsView.gender": string;
  "rowFilter.UserDetailsView.status": string;
  "rowFilter.UserDetailsView.satellite": string;
  "rowFilter.UserDetailsView.tngReceiptUrl": string;
  "rowFilter.UserDetailsView.avatarUrl": string;
  "rowFilter.UserDetailsView.city": string;
  "rowFilter.UserDetailsView.line1": string;
  "rowFilter.UserDetailsView.line2": string;
  "rowFilter.UserDetailsView.state": string;
  "rowFilter.UserDetailsView.country": string;
  "rowFilter.UserDetailsView.postalCode": string;
  "rowFilter.UserDetailsView.createdAt": string;
  "rowFilter.UserDetailsView.updatedAt": string;
  /** UserRole */
  "body.UserRole": definitions["UserRole"];
  "rowFilter.UserRole.id": string;
  "rowFilter.UserRole.role": string;
  "rowFilter.UserRole.userId": string;
  /** _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  "rowFilter._prisma_migrations.id": string;
  "rowFilter._prisma_migrations.checksum": string;
  "rowFilter._prisma_migrations.finished_at": string;
  "rowFilter._prisma_migrations.migration_name": string;
  "rowFilter._prisma_migrations.logs": string;
  "rowFilter._prisma_migrations.rolled_back_at": string;
  "rowFilter._prisma_migrations.started_at": string;
  "rowFilter._prisma_migrations.applied_steps_count": string;
}

export interface operations {}

export interface external {}
